name: Bindings tests

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review

env:
  CARGO_TERM_COLOR: always
  MATRIX_SDK_CRYPTO_NODEJS_PATH: bindings/matrix-sdk-crypto-nodejs
  MATRIX_SDK_CRYPTO_JS_PATH: bindings/matrix-sdk-crypto-js

jobs:
  test-matrix-sdk-crypto-nodejs:
    name: ${{ matrix.os-name }} [m]-crypto-nodejs, v${{ matrix.node-version }}
    if: github.event_name == 'push' || !github.event.pull_request.draft

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest]
        node-version: [14.0, 16.0, 18.0]
        include:
          - os: ubuntu-latest
            os-name: üêß

          - os: macos-latest
            os-name: üçè
            node-version: 18.0

          - node-version: 18.0
            build-doc: true

    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Load cache
        uses: Swatinem/rust-cache@v1

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install NPM dependencies
        working-directory: ${{ env.MATRIX_SDK_CRYPTO_NODEJS_PATH }}
        run: npm install

      - name: Build the Node.js binding
        working-directory: ${{ env.MATRIX_SDK_CRYPTO_NODEJS_PATH }}
        run: npm run release-build

      - name: Test the Node.js binding
        working-directory: ${{ env.MATRIX_SDK_CRYPTO_NODEJS_PATH }}
        run: npm run test

      # Building in dev-mode and copy lib in failure case
      - name: Build the Node.js binding in non-release
        if: failure()
        working-directory: ${{ env.MATRIX_SDK_CRYPTO_NODEJS_PATH }}
        run: |
          cp *.node release-mode-lib.node
          npm run build

      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: Failure Files
          path: |
            bindings/matrix-sdk-crypto-nodejs/*.node
            /var/crash/*.crash

      - if: ${{ matrix.build-doc }}
        name: Build the documentation
        working-directory: ${{ env.MATRIX_SDK_CRYPTO_NODEJS_PATH }}
        run: npm run doc

  test-matrix-sdk-crypto-js:
    name: üï∏ [m]-crypto-js
    if: github.event_name == 'push' || !github.event.pull_request.draft

    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown
          profile: minimal
          override: true

      - name: Load cache
        uses: Swatinem/rust-cache@v1

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.0

      - name: Install NPM dependencies
        working-directory: ${{ env.MATRIX_SDK_CRYPTO_JS_PATH }}
        run: npm install

      - name: Build the WebAssembly + JavaScript binding
        working-directory: ${{ env.MATRIX_SDK_CRYPTO_JS_PATH }}
        run: npm run build

      - name: Test the JavaScript binding
        working-directory: ${{ env.MATRIX_SDK_CRYPTO_JS_PATH }}
        run: npm run test

      - name: Build the documentation
        working-directory: ${{ env.MATRIX_SDK_CRYPTO_JS_PATH }}
        run: npm run doc

  test-apple:
    name: matrix-rust-components-swift
    runs-on: macos-12
    if: github.event_name == 'push' || !github.event.pull_request.draft

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          override: true

      - name: Install targets
        run: |
          rustup target add aarch64-apple-ios-sim --toolchain nightly
          rustup target add x86_64-apple-ios --toolchain nightly

      - name: Load cache
        uses: Swatinem/rust-cache@v1

      - name: Install Uniffi
        uses: actions-rs/cargo@v1
        with:
          command: install
          # keep in sync with uniffi dependency in Cargo.toml's
          args: uniffi_bindgen --git https://github.com/mozilla/uniffi-rs --rev 091c3561656e72e1a4160412c83b36d98e556d06

      - name: Generate .xcframework
        working-directory: bindings/apple
        run: sh ./debug_build_xcframework.sh x86_64 ci

      - name: Run XCTests
        working-directory: bindings/apple
        run: |
          xcodebuild test \
            -scheme MatrixRustSDK \
            -sdk iphonesimulator \
            -destination 'platform=iOS Simulator,name=iPhone 13'
