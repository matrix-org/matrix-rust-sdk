namespace olm {
    void set_logger(Logger logger);
    [Throws=MigrationError]
    void migrate(
        MigrationData data,
        [ByRef] string path,
        string? passphrase,
        ProgressListener progress_listener
    );
};

[Error]
interface MigrationError {
  Generic(string error_message);
};

callback interface Logger {
    void log(string log_line);
};

callback interface ProgressListener {
    void on_progress(i32 progress, i32 total);
};

[Error]
enum PkDecryptionError {
    "Olm",
};

[Error]
enum KeyImportError {
    "Export",
    "CryptoStore",
    "Json",
};

[Error]
enum SignatureError {
    "Signature",
    "Identifier",
    "CryptoStore",
    "UnknownDevice",
    "UnknownUserIdentity",
};

[Error]
enum SecretImportError {
    "Import",
    "CryptoStore",
};


[Error]
enum CryptoStoreError {
    "CryptoStore",
    "OlmError",
    "Serialization",
    "Identifier",
    "InvalidUserId",
};

[Error]
enum DecryptionError {
    "Identifier",
    "Serialization",
    "Megolm",
};

dictionary DeviceLists {
    sequence<string> changed;
    sequence<string> left;
};

dictionary KeysImportResult {
    i64 imported;
    i64 total;
    record<DOMString, record<DOMString, sequence<string>>> keys;
};

dictionary DecryptedEvent {
    string clear_event;
    string sender_curve25519_key;
    string? claimed_ed25519_key;
    sequence<string> forwarding_curve25519_chain;
};

dictionary Device {
    string user_id;
    string device_id;
    record<DOMString, string> keys;
    sequence<string> algorithms;
    string? display_name;
    boolean is_blocked;
    boolean locally_trusted;
    boolean cross_signing_trusted;
};

[Enum]
interface UserIdentity {
    Own(
        string user_id,
        boolean trusts_our_own_device,
        string master_key,
        string self_signing_key,
        string user_signing_key
    );
    Other(
        string user_id,
        string master_key,
        string self_signing_key
    );
};

dictionary CrossSigningStatus {
    boolean has_master;
    boolean has_self_signing;
    boolean has_user_signing;
};

dictionary CrossSigningKeyExport {
    string? master_key;
    string? self_signing_key;
    string? user_signing_key;
};

dictionary UploadSigningKeysRequest {
    string master_key;
    string self_signing_key;
    string user_signing_key;
};

dictionary BootstrapCrossSigningResult {
   UploadSigningKeysRequest upload_signing_keys_request;
   SignatureUploadRequest signature_request;
};

dictionary CancelInfo {
    string cancel_code;
    string reason;
    boolean cancelled_by_us;
};

dictionary StartSasResult {
    Sas sas;
    OutgoingVerificationRequest request;
};

dictionary Sas {
    string other_user_id;
    string other_device_id;
    string flow_id;
    string? room_id;
    boolean we_started;
    boolean has_been_accepted;
    boolean can_be_presented;
    boolean supports_emoji;
    boolean have_we_confirmed;
    boolean is_done;
    boolean is_cancelled;
    CancelInfo? cancel_info;
};

dictionary ScanResult {
    QrCode qr;
    OutgoingVerificationRequest request;
};

dictionary QrCode {
    string other_user_id;
    string other_device_id;
    string flow_id;
    string? room_id;
    boolean we_started;
    boolean other_side_scanned;
    boolean has_been_confirmed;
    boolean reciprocated;
    boolean is_done;
    boolean is_cancelled;
    CancelInfo? cancel_info;
};

dictionary VerificationRequest {
    string other_user_id;
    string? other_device_id;
    string flow_id;
    string? room_id;
    boolean we_started;
    boolean is_ready;
    boolean is_passive;
    boolean is_done;
    boolean is_cancelled;
    CancelInfo? cancel_info;
    sequence<string>? their_methods;
    sequence<string>? our_methods;

};

dictionary RequestVerificationResult {
    VerificationRequest verification;
    OutgoingVerificationRequest request;
};

dictionary ConfirmVerificationResult {
    sequence<OutgoingVerificationRequest> requests;
    SignatureUploadRequest? signature_request;
};

[Enum]
interface Verification {
    SasV1(Sas sas);
    QrCodeV1(QrCode qrcode);
};

dictionary KeyRequestPair {
    Request? cancellation;
    Request key_request;
};

[Enum]
interface OutgoingVerificationRequest {
    ToDevice(string request_id, string event_type, string body);
    InRoom(string request_id, string room_id, string event_type, string content);
};

[Enum]
interface Request {
    ToDevice(string request_id, string event_type, string body);
    KeysUpload(string request_id, string body);
    KeysQuery(string request_id, sequence<string> users);
    KeysClaim(string request_id, record<DOMString, record<DOMString, string>> one_time_keys);
    KeysBackup(string request_id, string version, string rooms);
    RoomMessage(string request_id, string room_id, string event_type, string content);
    SignatureUpload(string request_id, string body);
};

dictionary SignatureUploadRequest {
    string body;
};

enum RequestType {
    "KeysQuery",
    "KeysClaim",
    "KeysUpload",
    "ToDevice",
    "SignatureUpload",
    "KeysBackup",
    "RoomMessage",
};

interface OlmMachine {
    [Throws=CryptoStoreError]
    constructor(
        [ByRef] string user_id,
        [ByRef] string device_id,
        [ByRef] string path,
        string? passphrase
    );

    record<DOMString, string> identity_keys();
    string user_id();
    string device_id();

    [Throws=CryptoStoreError]
    string receive_sync_changes([ByRef] string events,
                              DeviceLists device_changes,
                              record<DOMString, i32> key_counts,
                              sequence<string>? unused_fallback_keys);
    [Throws=CryptoStoreError]
    sequence<Request> outgoing_requests();
    [Throws=CryptoStoreError]
    void mark_request_as_sent(
        [ByRef] string request_id,
        RequestType request_type,
        [ByRef] string response
    );

    [Throws=DecryptionError]
    DecryptedEvent decrypt_room_event([ByRef] string event, [ByRef] string room_id);
    [Throws=CryptoStoreError]
    string encrypt([ByRef] string room_id, [ByRef] string event_type, [ByRef] string content);

    [Throws=CryptoStoreError]
    UserIdentity? get_identity([ByRef] string user_id);
    [Throws=SignatureError]
    SignatureUploadRequest verify_identity([ByRef] string user_id);
    [Throws=CryptoStoreError]
    Device? get_device([ByRef] string user_id, [ByRef] string device_id);
    [Throws=CryptoStoreError]
    void mark_device_as_trusted([ByRef] string user_id, [ByRef] string device_id);
    [Throws=SignatureError]
    SignatureUploadRequest verify_device([ByRef] string user_id, [ByRef] string device_id);
    [Throws=CryptoStoreError]
    sequence<Device> get_user_devices([ByRef] string user_id);

    [Throws=CryptoStoreError]
    boolean is_user_tracked([ByRef] string user_id);
    void update_tracked_users(sequence<string> users);
    [Throws=CryptoStoreError]
    Request? get_missing_sessions(sequence<string> users);
    [Throws=CryptoStoreError]
    sequence<Request> share_room_key([ByRef] string room_id, sequence<string> users);

    [Throws=CryptoStoreError]
    void receive_unencrypted_verification_event([ByRef] string event, [ByRef] string room_id);
    sequence<VerificationRequest> get_verification_requests([ByRef] string user_id);
    VerificationRequest? get_verification_request([ByRef] string user_id, [ByRef] string flow_id);
    Verification? get_verification([ByRef] string user_id, [ByRef] string flow_id);

    [Throws=CryptoStoreError]
    VerificationRequest? request_verification(
        [ByRef] string user_id,
        [ByRef] string room_id,
        [ByRef] string event_id,
        sequence<string> methods
    );
    [Throws=CryptoStoreError]
    string? verification_request_content(
        [ByRef] string user_id,
        sequence<string> methods
    );
    [Throws=CryptoStoreError]
    RequestVerificationResult? request_self_verification(sequence<string> methods);
    [Throws=CryptoStoreError]
    RequestVerificationResult? request_verification_with_device(
        [ByRef] string user_id,
        [ByRef] string device_id,
        sequence<string> methods
    );

    OutgoingVerificationRequest? accept_verification_request(
        [ByRef] string user_id,
        [ByRef] string flow_id,
        sequence<string> methods
    );

    [Throws=CryptoStoreError]
    ConfirmVerificationResult? confirm_verification([ByRef] string user_id, [ByRef] string flow_id);
    OutgoingVerificationRequest? cancel_verification(
        [ByRef] string user_id,
        [ByRef] string flow_id,
        [ByRef] string cancel_code
    );

    [Throws=CryptoStoreError]
    StartSasResult? start_sas_with_device([ByRef] string user_id, [ByRef] string device_id);
    [Throws=CryptoStoreError]
    StartSasResult? start_sas_verification([ByRef] string user_id, [ByRef] string flow_id);
    OutgoingVerificationRequest? accept_sas_verification([ByRef] string user_id, [ByRef] string flow_id);
    sequence<i32>? get_emoji_index([ByRef] string user_id, [ByRef] string flow_id);
    sequence<i32>? get_decimals([ByRef] string user_id, [ByRef] string flow_id);

    [Throws=CryptoStoreError]
    QrCode? start_qr_verification([ByRef] string user_id, [ByRef] string flow_id);
    ScanResult? scan_qr_code([ByRef] string user_id, [ByRef] string flow_id, [ByRef] string data);
    string? generate_qr_code([ByRef] string user_id, [ByRef] string flow_id);

    [Throws=DecryptionError]
    KeyRequestPair request_room_key([ByRef] string event, [ByRef] string room_id);

    [Throws=CryptoStoreError]
    string export_keys([ByRef] string passphrase, i32 rounds);
    [Throws=KeyImportError]
    KeysImportResult import_keys(
        [ByRef] string keys,
        [ByRef] string passphrase,
        ProgressListener progress_listener
    );
    [Throws=KeyImportError]
    KeysImportResult import_decrypted_keys(
        [ByRef] string keys,
        ProgressListener progress_listener
    );
    [Throws=CryptoStoreError]
    void discard_room_key([ByRef] string room_id);

    CrossSigningStatus cross_signing_status();
    [Throws=CryptoStoreError]
    BootstrapCrossSigningResult bootstrap_cross_signing();
    CrossSigningKeyExport? export_cross_signing_keys();
    [Throws=SecretImportError]
    void import_cross_signing_keys(CrossSigningKeyExport export);
    [Throws=CryptoStoreError]
    boolean is_identity_verified([ByRef] string user_id);

    record<DOMString, record<DOMString, string>> sign([ByRef] string message);
    [Throws=DecodeError]
    void enable_backup_v1(MegolmV1BackupKey key, string version);
    [Throws=CryptoStoreError]
    void disable_backup();
    [Throws=CryptoStoreError]
    Request? backup_room_keys();
    [Throws=CryptoStoreError]
    void save_recovery_key(BackupRecoveryKey? key, string? version);
    [Throws=CryptoStoreError]
    RoomKeyCounts room_key_counts();
    [Throws=CryptoStoreError]
    BackupKeys? get_backup_keys();
    boolean backup_enabled();
    [Throws=CryptoStoreError]
    boolean verify_backup([ByRef] string auth_data);
};

dictionary PassphraseInfo {
    string private_key_salt;
    i32 private_key_iterations;
};

dictionary MegolmV1BackupKey {
    string public_key;
    record<DOMString, record<DOMString, string>> signatures;
    PassphraseInfo? passphrase_info;
    string backup_algorithm;
};

interface BackupKeys {
    BackupRecoveryKey recovery_key();
    string backup_version();
};

dictionary RoomKeyCounts {
    i64 total;
    i64 backed_up;
};

[Error]
enum DecodeError {
    "Decode",
    "CryptoStore",
};

interface BackupRecoveryKey {
    constructor();
    [Name=from_passphrase]
    constructor(string passphrase, string salt, i32 rounds);
    [Name=new_from_passphrase]
    constructor(string passphrase);
    [Name=from_base64, Throws=DecodeError]
    constructor(string key);
    [Name=from_base58, Throws=DecodeError]
    constructor(string key);
    string to_base58();
    string to_base64();
    MegolmV1BackupKey megolm_v1_public_key();
    [Throws=PkDecryptionError]
    string decrypt_v1(string ephemeral_key, string mac, string ciphertext);
};

dictionary MigrationData {
    PickledAccount account;
    sequence<PickledSession> sessions;
    sequence<PickledInboundGroupSession> inbound_group_sessions;
    string? backup_version;
    string? backup_recovery_key;
    sequence<u8> pickle_key;
    CrossSigningKeyExport cross_signing;
    sequence<string> tracked_users;
};

dictionary PickledAccount {
    string user_id;
    string device_id;
    string pickle;
    boolean shared;
    i64 uploaded_signed_key_count;
};

dictionary PickledSession {
    string pickle;
    string sender_key;
    boolean created_using_fallback_key;
    string creation_time;
    string last_use_time;
};

dictionary PickledInboundGroupSession {
    string pickle;
    string sender_key;
    record<DOMString, string> signing_key;
    string room_id;
    sequence<string> forwarding_chains;
    boolean imported;
    boolean backed_up;
};
