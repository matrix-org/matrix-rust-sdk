namespace matrix_sdk_ffi {};


/// Cancels on drop
interface StoppableSpawn {};

[Error]
interface ClientError {
    Generic(string msg);
};

callback interface ClientDelegate {
    void did_receive_sync_update();
    void did_receive_auth_error(boolean is_soft_logout);
    void did_update_restore_token();
};

dictionary RequiredState {
    string key;
    string value;
};

dictionary RoomSubscription {
    sequence<RequiredState>? required_state;
    u32? timeline_limit;
};

dictionary UpdateSummary {
    sequence<string> views;
    sequence<string> rooms;
};

callback interface SlidingSyncObserver {
    void did_receive_sync_update(UpdateSummary summary);
};

enum SlidingSyncState {
    /// Hasn't started yet
    "Cold",
    /// We are quickly preloading a preview of the most important rooms
    "Preload",
    /// We are trying to load all remaining rooms, might be in batches
    "CatchingUp",
    /// We are all caught up and now only sync the live responses.
    "Live",
};

enum SlidingSyncMode {
    /// Sync up the entire room list first, page by page
    "PagingFullSync",
    /// Sync up the entire room list first through a growing window
    "GrowingFullSync",
    /// Only ever sync the currently selected window
    "Selective",
};

callback interface SlidingSyncViewStateObserver {
    void did_receive_update(SlidingSyncState new_state);
};

[Enum]
interface RoomListEntry {
    Empty();
    Invalidated(string room_id);
    Filled(string room_id);
};

[Enum]
interface SlidingSyncViewRoomsListDiff {
    Replace(sequence<RoomListEntry> values);
    InsertAt(
        u32 index,
        RoomListEntry value
    );
    UpdateAt(
        u32 index,
        RoomListEntry value
    );
    RemoveAt(u32 index);
    Move(
        u32 old_index,
        u32 new_index
    );
    Push(RoomListEntry value);
    Pop();
    Clear();
};

callback interface SlidingSyncViewRoomListObserver {
    void did_receive_update(SlidingSyncViewRoomsListDiff diff);
};

callback interface SlidingSyncViewRoomsCountObserver {
    void did_receive_update(u32 count);
};

callback interface SlidingSyncViewRoomItemsObserver {
    void did_receive_update();
};

interface SlidingSyncViewBuilder {
    constructor();

    [Self=ByArc]
    SlidingSyncViewBuilder sync_mode(SlidingSyncMode mode);

    [Self=ByArc]
    SlidingSyncViewBuilder send_updates_for_items(boolean enable);

    [Throws=ClientError, Self=ByArc]
    SlidingSyncView build();
};

interface SlidingSyncView {
    StoppableSpawn observe_room_list(SlidingSyncViewRoomListObserver observer);
    StoppableSpawn observe_rooms_count(SlidingSyncViewRoomsCountObserver observer);
    StoppableSpawn observe_state(SlidingSyncViewStateObserver observer);
    StoppableSpawn observe_room_items(SlidingSyncViewRoomItemsObserver observer);
};

interface SlidingSyncRoom {
    StoppableSpawn? subscribe_and_add_timeline_listener(TimelineListener listener, RoomSubscription? settings);
    StoppableSpawn? add_timeline_listener(TimelineListener listener);
};

interface SlidingSync {
    void set_observer(SlidingSyncObserver? observer);

    [Throws=ClientError]
    void subscribe(string room_id, RoomSubscription? settings);
    [Throws=ClientError]
    void unsubscribe(string room_id);

    [Throws=ClientError]
    SlidingSyncRoom? get_room(string room_id);
    [Throws=ClientError]
    sequence<SlidingSyncRoom?> get_rooms(sequence<string> room_ids);
};

interface ClientBuilder {
    constructor();

    [Throws=ClientError, Self=ByArc]
    Client build();
};

interface SlidingSyncBuilder {
    [Throws=ClientError, Self=ByArc]
    SlidingSyncBuilder homeserver(string url);

    [Throws=ClientError, Self=ByArc]
    SlidingSync build();
};

interface Client {
    void set_delegate(ClientDelegate? delegate);

    [Throws=ClientError]
    void login(string username, string password, string? initial_device_name, string? device_id);

    [Throws=ClientError]
    void restore_session(Session session);

    [Throws=ClientError]
    Session session();

    [Throws=ClientError]
    string user_id();

    [Throws=ClientError]
    string display_name();

    [Throws=ClientError]
    void set_display_name(string name);

    [Throws=ClientError]
    string avatar_url();

    [Throws=ClientError]
    string device_id();

    [Throws=ClientError]
    string? account_data(string event_type);

    [Throws=ClientError]
    void set_account_data(string event_type, string content);

    [Throws=ClientError]
    string upload_media(string mime_type, sequence<u8> content);

    [Throws=ClientError]
    sequence<u8> get_media_content(MediaSource source);

    [Throws=ClientError]
    sequence<u8> get_media_thumbnail(MediaSource source, u64 width, u64 height);

    [Throws=ClientError]
    SessionVerificationController get_session_verification_controller();

    [Throws=ClientError]
    SlidingSync full_sliding_sync();

    [Throws=ClientError]
    void logout();
};

dictionary Session {
    string access_token;
    string? refresh_token;
    string user_id;
    string device_id;
    string homeserver_url;
    boolean is_soft_logout;
};

enum MembershipState {
    /// The user is banned.
    "Ban",
    /// The user has been invited.
    "Invite",
    /// The user has joined.
    "Join",
    /// The user has requested to join.
    "Knock",
    /// The user has left.
    "Leave",
};

dictionary RoomMember {
    string user_id;
    string? display_name;
    string? avatar_url;
    MembershipState membership;
    boolean is_name_ambiguous;
    i64 power_level;
    i64 normalized_power_level;
};

interface Room {
    [Throws=ClientError]
    string display_name();

    [Throws=ClientError]
    boolean is_encrypted();

    [Throws=ClientError]
    sequence<RoomMember> members();

    [Throws=ClientError]
    string? member_avatar_url(string user_id);

    [Throws=ClientError]
    string? member_display_name(string user_id);

    void add_timeline_listener(TimelineListener listener);

    // Loads older messages into the timeline.
    //
    // Raises an exception if there are no timeline listeners.
    [Throws=ClientError]
    void paginate_backwards(PaginationOptions opts);

    [Throws=ClientError]
    void send_read_receipt(string event_id);

    [Throws=ClientError]
    void send_read_marker(string fully_read_event_id, string? read_receipt_event_id);

    void send(RoomMessageEventContent msg, string? txn_id);

    [Throws=ClientError]
    void send_reply(string msg, string in_reply_to_event_id, string? txn_id);

    [Throws=ClientError]
    void edit(string new_msg, string original_event_id, string? txn_id);

    [Throws=ClientError]
    void redact(string event_id, string? reason, string? txn_id);

    [Throws=ClientError]
    void send_reaction(string event_id, string key);
};

callback interface TimelineListener {
    void on_update(TimelineDiff update);
};

interface TimelineDiff {
    MoveData? move();
};

dictionary MoveData {
    u32 old_index;
    u32 new_index;
};

[Enum]
interface PaginationOptions {
    SingleRequest(u16 event_limit);
    UntilNumItems(u16 event_limit, u16 items);
};

interface RoomMessageEventContent {};

interface MediaSource {
    string url();
};

interface AuthenticationService {
    constructor(string base_path, string? passphrase);
};

interface SessionVerificationEmoji {};

callback interface SessionVerificationControllerDelegate {
    void did_accept_verification_request();
    void did_start_sas_verification();
    void did_receive_verification_data(sequence<SessionVerificationEmoji> data);
    void did_fail();
    void did_cancel();
    void did_finish();
};

interface SessionVerificationController {
    void set_delegate(SessionVerificationControllerDelegate? delegate);

    [Throws=ClientError]
    void request_verification();

    [Throws=ClientError]
    void start_sas_verification();

    [Throws=ClientError]
    void approve_verification();

    [Throws=ClientError]
    void decline_verification();

    [Throws=ClientError]
    void cancel_verification();
};
