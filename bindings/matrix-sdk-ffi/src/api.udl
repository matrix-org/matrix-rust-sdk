namespace matrix_sdk_ffi {};

callback interface ClientDelegate {
    void did_receive_auth_error(boolean is_soft_logout);
};

callback interface NotificationDelegate {
    void did_receive_notification(NotificationItem notification);
};

dictionary NotificationItem {
    TimelineEvent event;
    string room_id;
    string? sender_display_name;
    string? sender_avatar_url;
    string room_display_name;
    string? room_avatar_url;
    string? room_canonical_alias;
    boolean is_noisy;
    boolean is_direct;
    boolean? is_encrypted;
};

interface TimelineEvent {};

enum SlidingSyncState {
    /// Sliding Sync has not started to load anything yet.
    "NotLoaded",
    /// Sliding Sync has been preloaded, i.e. restored from a cache for example.
    "Preloaded",
    /// We are trying to load all remaining rooms, might be in batches
    /// Updates are received from the loaded rooms, and new rooms are being fetched
    /// in background
    "PartiallyLoaded",
    /// Updates are received for all the loaded rooms, and all rooms have been
    /// loaded!
    "FullyLoaded",
};

dictionary CreateRoomParameters {
    string? name;
    string? topic = null;
    boolean is_encrypted;
    boolean is_direct = false;
    RoomVisibility visibility;
    RoomPreset preset;
    sequence<string>? invite = null;
    string? avatar = null;
};

enum RoomVisibility {
    /// Indicates that the room will be shown in the published room list.
    "Public",

    /// Indicates that the room will not be shown in the published room list.
    "Private",
};

enum RoomPreset {
    /// `join_rules` is set to `invite` and `history_visibility` is set to
    /// `shared`.
    "PrivateChat",

    /// `join_rules` is set to `public` and `history_visibility` is set to
    /// `shared`.
    "PublicChat",

    /// Same as `PrivateChat`, but all initial invitees get the same power level
    /// as the creator.
    "TrustedPrivateChat",
};

interface RoomMessageEventContent {};

[Error]
interface ClientError {
    Generic(string msg);
};

interface MediaSource {
    [Name=from_json, Throws=ClientError]
    constructor(string json);
    string to_json();
    string url();
};

interface SessionVerificationEmoji {};

callback interface SessionVerificationControllerDelegate {
    void did_accept_verification_request();
    void did_start_sas_verification();
    void did_receive_verification_data(sequence<SessionVerificationEmoji> data);
    void did_fail();
    void did_cancel();
    void did_finish();
};
